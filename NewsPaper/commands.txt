>>> from news.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user).

>>> user_1 = User.objects.create(username='Shlomo', first_name='Saul')
>>> user_2 = User.objects.create(username='Avi', first_name='Levy')

2. Создать два объекта модели Author, связанные с пользователями.

>>> Author.objects.create(author_user=user_1)
<Author: Author object (1)>
>>> Author.objects.create(author_user=user_2)
<Author: Author object (2)>

3. Добавить 4 категории в модель Category.

>>> Category.objects.create(name='IT')
<Category: Category object (1)>
>>> Category.objects.create(name='Education')
<Category: Category object (2)>
>>> Category.objects.create(name='Sport')
<Category: Category object (3)>
>>> Category.objects.create(name='Politics')
<Category: Category object (4)>
>>> Category.objects.create(name='Politics')

4.Добавить 2 статьи и 1 новость.

>>> Post.objects.create(author=Author.objects.get(author_user=User.objects.get(username='Shlomo')), category_type='NW', title='news title 1', text='news text 1')
<Post: Post object (1)>
>>> Post.objects.create(author=Author.objects.get(author_user=User.objects.get(username='Shlomo')), category_type='AR', title='article title 2', text='article text 2')
<Post: Post object (2)>
>>> Post.objects.create(author=Author.objects.get(author_user=User.objects.get(username='Avi')), category_type='AR', title='article title 3', text='article text 3')
<Post: Post object (3)>

5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

>>> p1 = Post.objects.get(pk=1)
>>> p2 = Post.objects.get(pk=2)  
>>> p3 = Post.objects.get(pk=3)  
>>> c1 = Category.objects.get(name='IT')
>>> c2 = Category.objects.get(name='Education')
>>> c3 = Category.objects.get(name='Sport') 
>>> c4 = Category.objects.get(name='Politics')

>>> p1.post_category.add(c1) 
>>> p2.post_category.add(c2) 
>>> p2.post_category.add(c2, c3)
>>> p3.post_category.add(c3, c4)  

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

>>> Comment.objects.create(comment_user=User.objects.get(username='Shlomo'), comment_post= Post.objects.get(pk=1), text='Comment text 1')
<Comment: Shlomo>
>>> Comment.objects.create(comment_user=User.objects.get(username='Shlomo'), comment_post= Post.objects.get(pk=2), text='Comment text 2')
<Comment: Shlomo>
>>> Comment.objects.create(comment_user=User.objects.get(username='Avi'), comment_post= Post.objects.get(pk=3), text='Comment text 3')
<Comment: Avi>
>>> Comment.objects.create(comment_user=User.objects.get(username='Avi'), comment_post= Post.objects.get(pk=1), text='Comment text 4')
<Comment: Avi>

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=2).like() 
>>> Post.objects.get(pk=3).dislike()  
>>> Post.objects.get(pk=1).dislike() 
>>> 

8. Обновить рейтинги пользователей.

>>> Author.objects.get(author_user=User.objects.get(username='Shlomo')).update_rating()
>>> Author.objects.get(author_user=User.objects.get(username='Avi')).update_rating()  

>>> a = Author.objects.get(author_user=User.objects.get(username='Shlomo'))  
>>> a.rating_author
6
>>> Author.objects.get(author_user=User.objects.get(username='Avi')).rating_author 
-3

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

>>> best = Author.objects.all().order_by('-rating_author').values('author_user__username', 'rating_author')[0]
>>> print(best)
{'author_user__username': 'Shlomo', 'rating_author': 6}

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

>>> best_post = Post.objects.all().order_by('-rating').values('date_creation', 'author__author_user__username', 'rating', 'title')[0]
>>> print(best_post)
{'date_creation': datetime.datetime(2023, 5, 1, 17, 27, 34, 675092, tzinfo=datetime.timezone.utc), 'author__author_user__username': 'Shlomo', 'rating': 1, 'title': 'news title 1'}
>>>
11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

>>> best_p = Post.objects.all().order_by('-rating')[0]
>>> print(best_p)
Post object (1)
>>>
>>> comm_best_p = Comment.objects.filter(comment_post__id = best_p.id).values('date_creation', 'comment_user__username', 'rating', 'text')
>>> print(comm_best_p)
<QuerySet [{'date_creation': datetime.datetime(2023, 5, 1, 17, 35, 44, 147587, tzinfo=datetime.timezone.utc), 'comment_user__username': 'Shlomo', 'rating': 0, 'text': 'Comment text 1'}, {'date_creation': datetime.datetime(2023, 5, 1, 17, 37, 8, 898851, tzinfo=datetime.timezone.utc), 'comment_user__username': 'Avi', 'rating': 0, 'text': 'Comment text 4'}]>
>>>